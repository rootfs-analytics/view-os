diff -Naur linux-2.6.26-rc4/arch/powerpc/kernel/entry_32.S linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/entry_32.S
--- linux-2.6.26-rc4/arch/powerpc/kernel/entry_32.S	2008-05-29 11:52:05.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/entry_32.S	2008-05-31 12:35:57.000000000 +0200
@@ -299,6 +299,7 @@
 	stw	r0,_TRAP(r1)
 	addi	r3,r1,STACK_FRAME_OVERHEAD
 	bl	do_syscall_trace_enter
+	mr  r10,r3
 	lwz	r0,GPR0(r1)	/* Restore original registers */
 	lwz	r3,GPR3(r1)
 	lwz	r4,GPR4(r1)
@@ -307,6 +308,8 @@
 	lwz	r7,GPR7(r1)
 	lwz	r8,GPR8(r1)
 	REST_NVGPRS(r1)
+	cmpwi r10,0
+	bne-  ret_from_syscall
 	b	syscall_dotrace_cont
 
 syscall_exit_work:
diff -Naur linux-2.6.26-rc4/arch/powerpc/kernel/entry_64.S linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/entry_64.S
--- linux-2.6.26-rc4/arch/powerpc/kernel/entry_64.S	2008-05-29 11:52:05.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/entry_64.S	2008-05-31 12:35:57.000000000 +0200
@@ -213,6 +213,7 @@
 	bl	.save_nvgprs
 	addi	r3,r1,STACK_FRAME_OVERHEAD
 	bl	.do_syscall_trace_enter
+	mr  r11,r3
 	ld	r0,GPR0(r1)	/* Restore original registers */
 	ld	r3,GPR3(r1)
 	ld	r4,GPR4(r1)
@@ -223,6 +224,8 @@
 	addi	r9,r1,STACK_FRAME_OVERHEAD
 	clrrdi	r10,r1,THREAD_SHIFT
 	ld	r10,TI_FLAGS(r10)
+	cmpwi r11,0
+	bne-  syscall_exit
 	b	syscall_dotrace_cont
 
 syscall_enosys:
diff -Naur linux-2.6.26-rc4/arch/powerpc/kernel/ptrace.c linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/ptrace.c
--- linux-2.6.26-rc4/arch/powerpc/kernel/ptrace.c	2008-04-17 04:49:44.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/powerpc/kernel/ptrace.c	2008-05-31 12:35:57.000000000 +0200
@@ -867,7 +867,7 @@
 	}
 }
 
-void do_syscall_trace_enter(struct pt_regs *regs)
+int do_syscall_trace_enter(struct pt_regs *regs)
 {
 	secure_computing(regs->gpr[0]);
 
@@ -891,6 +891,7 @@
 					    regs->gpr[5] & 0xffffffff,
 					    regs->gpr[6] & 0xffffffff);
 	}
+	return (current->ptrace & PT_VM_SKIPCALL);
 }
 
 void do_syscall_trace_leave(struct pt_regs *regs)
@@ -900,7 +901,9 @@
 				   regs->result);
 
 	if ((test_thread_flag(TIF_SYSCALL_TRACE)
-	     || test_thread_flag(TIF_SINGLESTEP))
-	    && (current->ptrace & PT_PTRACED))
+				|| test_thread_flag(TIF_SINGLESTEP))
+			&& (current->ptrace & PT_PTRACED) && 
+			((current->ptrace & PT_VM_SKIPEXIT)==0))
+
 		do_syscall_trace();
 }
diff -Naur linux-2.6.26-rc4/arch/ppc/kernel/entry.S linux-2.6.26-rc4-ptmulti-ptvm/arch/ppc/kernel/entry.S
--- linux-2.6.26-rc4/arch/ppc/kernel/entry.S	2008-04-17 04:49:44.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/ppc/kernel/entry.S	2008-05-31 12:35:57.000000000 +0200
@@ -292,6 +292,7 @@
 	stw	r0,TRAP(r1)
 	addi	r3,r1,STACK_FRAME_OVERHEAD
 	bl	do_syscall_trace_enter
+	mr  r10,r3
 	lwz	r0,GPR0(r1)	/* Restore original registers */
 	lwz	r3,GPR3(r1)
 	lwz	r4,GPR4(r1)
@@ -300,6 +301,8 @@
 	lwz	r7,GPR7(r1)
 	lwz	r8,GPR8(r1)
 	REST_NVGPRS(r1)
+	cmpwi r10,0
+	bne-  ret_from_syscall
 	b	syscall_dotrace_cont
 
 syscall_exit_work:
diff -Naur linux-2.6.26-rc4/arch/um/include/kern_util.h linux-2.6.26-rc4-ptmulti-ptvm/arch/um/include/kern_util.h
--- linux-2.6.26-rc4/arch/um/include/kern_util.h	2008-04-17 04:49:44.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/um/include/kern_util.h	2008-05-31 12:35:57.000000000 +0200
@@ -57,7 +57,7 @@
 extern unsigned long to_irq_stack(unsigned long *mask_out);
 extern unsigned long from_irq_stack(int nested);
 
-extern void syscall_trace(struct uml_pt_regs *regs, int entryexit);
+extern int syscall_trace(struct uml_pt_regs *regs, int entryexit);
 extern int singlestepping(void *t);
 
 extern void segv_handler(int sig, struct uml_pt_regs *regs);
diff -Naur linux-2.6.26-rc4/arch/um/kernel/ptrace.c linux-2.6.26-rc4-ptmulti-ptvm/arch/um/kernel/ptrace.c
--- linux-2.6.26-rc4/arch/um/kernel/ptrace.c	2008-04-17 04:49:44.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/um/kernel/ptrace.c	2008-05-31 12:35:57.000000000 +0200
@@ -64,6 +64,12 @@
 		ret = poke_user(child, addr, data);
 		break;
 
+	case PTRACE_SYSVM:
+		if (addr == PTRACE_VM_TEST) {
+			ret = PTRACE_VM_MASK;
+			break;
+		}
+
 	/* continue and stop at next (return from) syscall */
 	case PTRACE_SYSCALL:
 	/* restart after signal. */
@@ -73,9 +79,18 @@
 			break;
 
 		set_singlestepping(child, 0);
-		if (request == PTRACE_SYSCALL)
+		child->ptrace &= ~PT_VM_MASK;
+		if (request == PTRACE_CONT) {
+			clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
+		}
+		else {
 			set_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
-		else clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
+			if (request == PTRACE_SYSVM) {
+				/* set PT_VM_SKIPCALL and PT_VM_SKIPEXIT by
+				 *          * one operation */
+				child->ptrace |= (addr & PTRACE_VM_MASK) << 28;
+			}
+		}
 		child->exit_code = data;
 		wake_up_process(child);
 		ret = 0;
@@ -245,7 +260,7 @@
  * XXX Check PT_DTRACE vs TIF_SINGLESTEP for singlestepping check and
  * PT_PTRACED vs TIF_SYSCALL_TRACE for syscall tracing check
  */
-void syscall_trace(struct uml_pt_regs *regs, int entryexit)
+int syscall_trace(struct uml_pt_regs *regs, int entryexit)
 {
 	int is_singlestep = (current->ptrace & PT_DTRACE) && entryexit;
 	int tracesysgood;
@@ -267,10 +282,13 @@
 		send_sigtrap(current, regs, 0);
 
 	if (!test_thread_flag(TIF_SYSCALL_TRACE))
-		return;
+		return 0;
 
 	if (!(current->ptrace & PT_PTRACED))
-		return;
+		return 0;
+
+	if (entryexit && (current->ptrace & PT_VM_SKIPEXIT))
+		return 0;
 
 	/*
 	 * the 0x80 provides a way for the tracing parent to distinguish
@@ -291,4 +309,8 @@
 		send_sig(current->exit_code, current, 1);
 		current->exit_code = 0;
 	}
+	if (!entryexit && (current->ptrace & PT_VM_SKIPCALL))
+		return 1;
+	else
+		return 0;
 }
diff -Naur linux-2.6.26-rc4/arch/um/kernel/skas/syscall.c linux-2.6.26-rc4-ptmulti-ptvm/arch/um/kernel/skas/syscall.c
--- linux-2.6.26-rc4/arch/um/kernel/skas/syscall.c	2008-04-17 04:49:44.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/um/kernel/skas/syscall.c	2008-05-31 12:35:57.000000000 +0200
@@ -17,8 +17,9 @@
 	struct pt_regs *regs = container_of(r, struct pt_regs, regs);
 	long result;
 	int syscall;
+	int skip_call;
 
-	syscall_trace(r, 0);
+	skip_call=syscall_trace(r, 0);
 
 	/*
 	 * This should go in the declaration of syscall, but when I do that,
@@ -29,12 +30,14 @@
 	 *     gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)
 	 * in case it's a compiler bug.
 	 */
-	syscall = UPT_SYSCALL_NR(r);
-	if ((syscall >= NR_syscalls) || (syscall < 0))
-		result = -ENOSYS;
-	else result = EXECUTE_SYSCALL(syscall, regs);
+	if (skip_call == 0) {
+		syscall = UPT_SYSCALL_NR(r);
+		if ((syscall >= NR_syscalls) || (syscall < 0))
+			result = -ENOSYS;
+		else result = EXECUTE_SYSCALL(syscall, regs);
 
-	REGS_SET_SYSCALL_RETURN(r->gp, result);
+		REGS_SET_SYSCALL_RETURN(r->gp, result);
+	}
 
 	syscall_trace(r, 1);
 }
diff -Naur linux-2.6.26-rc4/arch/x86/kernel/entry_64.S linux-2.6.26-rc4-ptmulti-ptvm/arch/x86/kernel/entry_64.S
--- linux-2.6.26-rc4/arch/x86/kernel/entry_64.S	2008-05-29 11:52:06.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/x86/kernel/entry_64.S	2008-05-31 12:35:57.000000000 +0200
@@ -316,6 +316,11 @@
 	movq $-ENOSYS,RAX-ARGOFFSET(%rsp)
 	jmp ret_from_sys_call
 
+skipcall:
+	LOAD_ARGS ARGOFFSET  /* reload args from stack in case ptrace changed it */
+	RESTORE_REST
+	jmp ret_from_sys_call
+
 	/* Do syscall tracing */
 tracesys:			 
 	SAVE_REST
@@ -323,6 +328,8 @@
 	FIXUP_TOP_OF_STACK %rdi
 	movq %rsp,%rdi
 	call syscall_trace_enter
+	testq %rax,%rax
+	jnz skipcall
 	LOAD_ARGS ARGOFFSET  /* reload args from stack in case ptrace changed it */
 	RESTORE_REST
 	cmpq $__NR_syscall_max,%rax
diff -Naur linux-2.6.26-rc4/arch/x86/kernel/ptrace.c linux-2.6.26-rc4-ptmulti-ptvm/arch/x86/kernel/ptrace.c
--- linux-2.6.26-rc4/arch/x86/kernel/ptrace.c	2008-05-29 11:52:06.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/arch/x86/kernel/ptrace.c	2008-05-31 12:35:57.000000000 +0200
@@ -1415,6 +1415,9 @@
 	if (!(current->ptrace & PT_PTRACED))
 		goto out;
 
+	if (entryexit && (current->ptrace & PT_VM_SKIPEXIT))
+		return 0;
+
 	/* If a process stops on the 1st tracepoint with SYSCALL_TRACE
 	 * and then is resumed with SYSEMU_SINGLESTEP, it will come in
 	 * here. We have to check this and return */
@@ -1442,7 +1445,8 @@
 		send_sig(current->exit_code, current, 1);
 		current->exit_code = 0;
 	}
-	ret = is_sysemu;
+	ret = (is_sysemu || (!entryexit && (current->ptrace & PT_VM_SKIPCALL)));
+
 out:
 	if (unlikely(current->audit_context) && !entryexit)
 		audit_syscall_entry(AUDIT_ARCH_I386, regs->orig_ax,
@@ -1481,7 +1485,7 @@
 	}
 }
 
-asmlinkage void syscall_trace_enter(struct pt_regs *regs)
+asmlinkage long syscall_trace_enter(struct pt_regs *regs)
 {
 	/* do the secure computing check first */
 	secure_computing(regs->orig_ax);
@@ -1503,6 +1507,8 @@
 					    regs->dx, regs->r10);
 		}
 	}
+
+	return (current->ptrace & PT_VM_SKIPCALL);
 }
 
 asmlinkage void syscall_trace_leave(struct pt_regs *regs)
@@ -1512,7 +1518,8 @@
 
 	if ((test_thread_flag(TIF_SYSCALL_TRACE)
 	     || test_thread_flag(TIF_SINGLESTEP))
-	    && (current->ptrace & PT_PTRACED))
+			&& (current->ptrace & PT_PTRACED) &&
+			((current->ptrace & PT_VM_SKIPEXIT)==0))
 		syscall_trace(regs);
 }
 
diff -Naur linux-2.6.26-rc4/include/linux/mm.h linux-2.6.26-rc4-ptmulti-ptvm/include/linux/mm.h
--- linux-2.6.26-rc4/include/linux/mm.h	2008-05-29 11:52:09.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/include/linux/mm.h	2008-05-31 12:35:58.000000000 +0200
@@ -804,6 +804,7 @@
 
 extern int make_pages_present(unsigned long addr, unsigned long end);
 extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
+extern int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);
 
 int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, unsigned long start,
 		int len, int write, int force, struct page **pages, struct vm_area_struct **vmas);
diff -Naur linux-2.6.26-rc4/include/linux/ptrace.h linux-2.6.26-rc4-ptmulti-ptvm/include/linux/ptrace.h
--- linux-2.6.26-rc4/include/linux/ptrace.h	2008-05-29 11:52:09.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/include/linux/ptrace.h	2008-05-31 12:35:58.000000000 +0200
@@ -20,6 +20,7 @@
 #define PTRACE_DETACH		  17
 
 #define PTRACE_SYSCALL		  24
+/*      PTRACE_SYSVM    has been defined below */
 
 /* 0x4200-0x4300 are reserved for architecture-independent additions.  */
 #define PTRACE_SETOPTIONS	0x4200
@@ -27,6 +28,19 @@
 #define PTRACE_GETSIGINFO	0x4202
 #define PTRACE_SETSIGINFO	0x4203
 
+#define PTRACE_MULTI            0x4300
+#define PTRACE_PEEKCHARDATA     0x4301
+#define PTRACE_POKECHARDATA     0x4302
+#define PTRACE_PEEKSTRINGDATA   0x4303
+#define PTRACE_SYSVM    0x43ff
+
+struct ptrace_multi {
+	long request;
+	long addr;
+	void *localaddr;
+	long length;
+};
+
 /* options set using PTRACE_SETOPTIONS */
 #define PTRACE_O_TRACESYSGOOD	0x00000001
 #define PTRACE_O_TRACEFORK	0x00000002
@@ -46,6 +60,12 @@
 #define PTRACE_EVENT_VFORK_DONE	5
 #define PTRACE_EVENT_EXIT	6
 
+/* options for PTRACE_SYSVM */
+#define PTRACE_VM_TEST    0x80000000
+#define PTRACE_VM_SKIPCALL  1
+#define PTRACE_VM_SKIPEXIT  2
+#define PTRACE_VM_MASK    0x00000003
+
 #include <asm/ptrace.h>
 
 #ifdef __KERNEL__
@@ -68,6 +88,10 @@
 #define PT_TRACE_VFORK_DONE	0x00000100
 #define PT_TRACE_EXIT	0x00000200
 
+#define PT_VM_SKIPCALL  0x10000000
+#define PT_VM_SKIPEXIT  0x20000000
+#define PT_VM_MASK      0x30000000
+
 #define PT_TRACE_MASK	0x000003f4
 
 /* single stepping state bits (used on ARM and PA-RISC) */
diff -Naur linux-2.6.26-rc4/kernel/ptrace.c linux-2.6.26-rc4-ptmulti-ptvm/kernel/ptrace.c
--- linux-2.6.26-rc4/kernel/ptrace.c	2008-05-29 11:52:09.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/kernel/ptrace.c	2008-05-31 12:35:59.000000000 +0200
@@ -2,6 +2,7 @@
  * linux/kernel/ptrace.c
  *
  * (C) Copyright 1999 Linus Torvalds
+ * (C) PTRACE_MULTI support 2006,2008 Renzo Davoli 
  *
  * Common interfaces for "ptrace()" which we do not want
  * to continually duplicate across every architecture.
@@ -244,52 +245,23 @@
 
 int ptrace_readdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)
 {
-	int copied = 0;
+	if (!access_ok(VERIFY_WRITE, dst ,len))
+		return -EIO;
+	return access_process_vm_user(tsk, src, dst, len, 0, 0);
+}
 
-	while (len > 0) {
-		char buf[128];
-		int this_len, retval;
-
-		this_len = (len > sizeof(buf)) ? sizeof(buf) : len;
-		retval = access_process_vm(tsk, src, buf, this_len, 0);
-		if (!retval) {
-			if (copied)
-				break;
-			return -EIO;
-		}
-		if (copy_to_user(dst, buf, retval))
-			return -EFAULT;
-		copied += retval;
-		src += retval;
-		dst += retval;
-		len -= retval;			
-	}
-	return copied;
+int ptrace_readstringdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)
+{
+	if (!access_ok(VERIFY_WRITE, dst ,len))
+		return -EIO;
+	return access_process_vm_user(tsk, src, dst, len, 0, 1);
 }
 
 int ptrace_writedata(struct task_struct *tsk, char __user *src, unsigned long dst, int len)
 {
-	int copied = 0;
-
-	while (len > 0) {
-		char buf[128];
-		int this_len, retval;
-
-		this_len = (len > sizeof(buf)) ? sizeof(buf) : len;
-		if (copy_from_user(buf, src, this_len))
-			return -EFAULT;
-		retval = access_process_vm(tsk, dst, buf, this_len, 1);
-		if (!retval) {
-			if (copied)
-				break;
-			return -EIO;
-		}
-		copied += retval;
-		src += retval;
-		dst += retval;
-		len -= retval;			
-	}
-	return copied;
+	if (!access_ok(VERIFY_READ, dst ,len))
+		return -EIO;
+	return access_process_vm_user(tsk, dst, src, len, 1, 0);
 }
 
 static int ptrace_setoptions(struct task_struct *child, long data)
@@ -375,12 +347,12 @@
 #define is_sysemu_singlestep(request)	0
 #endif
 
-static int ptrace_resume(struct task_struct *child, long request, long data)
+static int ptrace_resume(struct task_struct *child, long request, long addr, long data)
 {
 	if (!valid_signal(data))
 		return -EIO;
 
-	if (request == PTRACE_SYSCALL)
+	if (request == PTRACE_SYSCALL || request == PTRACE_SYSVM)
 		set_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
 	else
 		clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);
@@ -390,6 +362,9 @@
 		set_tsk_thread_flag(child, TIF_SYSCALL_EMU);
 	else
 		clear_tsk_thread_flag(child, TIF_SYSCALL_EMU);
+	child->ptrace &= ~PT_VM_MASK;
+	if (request == PTRACE_SYSVM)
+		child->ptrace |= (addr & PTRACE_VM_MASK) << 28;
 #endif
 
 	if (is_singleblock(request)) {
@@ -453,6 +428,13 @@
 		ret = ptrace_detach(child, data);
 		break;
 
+#ifdef PTRACE_SYSEMU
+	case PTRACE_SYSVM:
+		if (addr == PTRACE_VM_TEST) {
+			ret = PTRACE_VM_MASK;
+			break;
+		}
+#endif
 #ifdef PTRACE_SINGLESTEP
 	case PTRACE_SINGLESTEP:
 #endif
@@ -465,12 +447,12 @@
 #endif
 	case PTRACE_SYSCALL:
 	case PTRACE_CONT:
-		return ptrace_resume(child, request, data);
+		return ptrace_resume(child, request, addr, data);
 
 	case PTRACE_KILL:
 		if (child->exit_state)	/* already dead */
 			return 0;
-		return ptrace_resume(child, request, SIGKILL);
+		return ptrace_resume(child, request, addr, SIGKILL);
 
 	default:
 		break;
@@ -534,6 +516,53 @@
 #define arch_ptrace_attach(child)	do { } while (0)
 #endif
 
+static int multi_ptrace(struct task_struct *child, long request, long addr, long size)
+{
+	int i, ret;
+	long j;
+	ret=0;
+	if (!access_ok(VERIFY_READ, addr,size*sizeof(struct ptrace_multi))) {
+		ret = -EIO;
+		goto out_multi_ptrace;
+	}
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
+		unsigned long len;
+		struct ptrace_multi __user pm ;
+		__copy_from_user(&pm, (struct ptrace_multi __user *)addr, sizeof(struct ptrace_multi));
+		len = pm.length;
+		switch ( pm.request){
+			case PTRACE_PEEKTEXT:
+			case PTRACE_PEEKDATA:
+			case PTRACE_PEEKUSR:
+				if (len <= 0) len=1;
+				for (j=0; j<len && ret==0; j++)
+					ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long));
+				break;
+			case PTRACE_POKETEXT:
+			case PTRACE_POKEDATA:
+			case PTRACE_POKEUSR:
+				if (len <= 0) len=1;
+				for (j=0; j<len && ret==0; j++)
+					ret=arch_ptrace(child, pm.request, (long) (pm.addr) + j*sizeof(long), *(((long *) (pm.localaddr)) + j));
+				break;
+			case PTRACE_PEEKCHARDATA:
+				ret = ptrace_readdata(child, pm.addr, pm.localaddr, len);
+				break;
+			case PTRACE_POKECHARDATA:
+				ret = ptrace_writedata(child, pm.localaddr, pm.addr, len);
+				break;
+			case PTRACE_PEEKSTRINGDATA:
+				ret = ptrace_readstringdata(child, pm.addr, pm.localaddr, len);
+				break;
+			default:
+				ret=arch_ptrace(child, pm.request, (long) (pm.addr), (long) (pm.localaddr));
+				break;
+		}
+	}
+out_multi_ptrace:
+	return ret;
+}
+
 asmlinkage long sys_ptrace(long request, long pid, long addr, long data)
 {
 	struct task_struct *child;
@@ -571,7 +600,11 @@
 	if (ret < 0)
 		goto out_put_task_struct;
 
-	ret = arch_ptrace(child, request, addr, data);
+	if (request == PTRACE_MULTI)
+		ret = multi_ptrace(child, request, addr, data);
+	else
+		ret = arch_ptrace(child, request, addr, data);
+
 	if (ret < 0)
 		goto out_put_task_struct;
 
diff -Naur linux-2.6.26-rc4/mm/memory.c linux-2.6.26-rc4-ptmulti-ptvm/mm/memory.c
--- linux-2.6.26-rc4/mm/memory.c	2008-05-29 11:52:09.000000000 +0200
+++ linux-2.6.26-rc4-ptmulti-ptvm/mm/memory.c	2008-05-31 12:35:59.000000000 +0200
@@ -2793,6 +2793,74 @@
 }
 
 /*
+ * Access another process' address space to/from user space
+ * Do not walk the page table directly, use get_user_pages
+ */
+int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string)
+{
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	struct page *page;
+	char *buf;
+	unsigned long old_addr = addr;
+
+	mm = get_task_mm(tsk);
+	if (!mm)
+		return 0;
+
+	buf=kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!buf)
+		return 0;
+
+	down_read(&mm->mmap_sem);
+	/* ignore errors, just check how much was sucessfully transfered */
+	while (len) {
+		int bytes, ret, offset;
+		void *maddr;
+
+		ret = get_user_pages(tsk, mm, addr, 1,
+				write, 1, &page, &vma);
+		if (ret <= 0)
+			break;
+
+		bytes = len;
+		offset = addr & (PAGE_SIZE-1);
+		if (bytes > PAGE_SIZE-offset)
+			bytes = PAGE_SIZE-offset;
+
+		maddr = kmap(page);
+		if (write) {
+			__copy_from_user(buf,ubuf,bytes);
+			copy_to_user_page(vma, page, addr,
+					maddr + offset, buf, bytes);
+			if (!PageCompound(page))
+				set_page_dirty_lock(page);
+		} else {
+			copy_from_user_page(vma, page, addr,
+					buf, maddr + offset, bytes);
+			if (string) {
+				for (offset=0;offset<bytes;offset++)
+					if (buf[offset]==0)
+						break;
+				if (offset < bytes)
+					bytes=len=offset+1;
+			}
+			ret=__copy_to_user(ubuf,buf,bytes);
+		}
+		kunmap(page);
+		page_cache_release(page);
+		len -= bytes;
+		ubuf += bytes;
+		addr += bytes;
+	}
+	up_read(&mm->mmap_sem);
+	mmput(mm);
+
+	kfree(buf);
+	return addr - old_addr;
+}
+
+/*
  * Print the name of a VMA.
  */
 void print_vma_addr(char *prefix, unsigned long ip)
