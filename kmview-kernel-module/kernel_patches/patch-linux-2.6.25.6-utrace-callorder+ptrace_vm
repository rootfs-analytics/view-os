diff -Naur linux-2.6.25.6-utrace-callorder/include/linux/ptrace.h linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/ptrace.h
--- linux-2.6.25.6-utrace-callorder/include/linux/ptrace.h	2008-06-11 22:50:10.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/ptrace.h	2008-06-11 23:25:40.000000000 +0200
@@ -46,6 +46,11 @@
 #define PTRACE_EVENT_VFORK_DONE	5
 #define PTRACE_EVENT_EXIT	6
 
+/* options for new PTRACE_SYSCALL syntax*/
+#define PTRACE_SYSCALL_SKIPEXIT  0x2
+#define PTRACE_SYSCALL_SKIPCALL  0x6
+#define PTRACE_SYSCALL_MASK    0x00000006
+
 #include <asm/ptrace.h>
 
 #ifdef __KERNEL__
@@ -70,6 +75,10 @@
 
 #define PT_TRACE_MASK	0x000003f4
 
+#define PT_SYSCALL_SKIPEXIT  0x60000000
+#define PT_SYSCALL_SKIPCALL  0x40000000
+#define PT_SYSCALL_MASK      0x60000000
+
 /* single stepping state bits (used on ARM and PA-RISC) */
 #define PT_SINGLESTEP_BIT	31
 #define PT_SINGLESTEP		(1<<PT_SINGLESTEP_BIT)
diff -Naur linux-2.6.25.6-utrace-callorder/kernel/ptrace.c linux-2.6.25.6-utrace-callorder-ptrace_vm/kernel/ptrace.c
--- linux-2.6.25.6-utrace-callorder/kernel/ptrace.c	2008-06-11 22:50:11.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm/kernel/ptrace.c	2008-06-11 23:25:40.000000000 +0200
@@ -85,6 +85,8 @@
 #define CHECK_DEAD(p)	do { } while (0)
 #endif
 
+#define PT_UTRACE_SYSCALL_SKIPCALL (PT_SYSCALL_SKIPCALL >> 28)
+#define PT_UTRACE_SYSCALL_SKIPEXIT (PT_SYSCALL_SKIPEXIT >> 28)
 struct ptrace_state
 {
 	struct rcu_head rcu;
@@ -106,6 +108,7 @@
 #ifdef PTRACE_SYSEMU
 	unsigned int sysemu:1;  /* PTRACE_SYSEMU in progress. */
 #endif
+	unsigned int skipexit:1;
 	unsigned int have_eventmsg:1; /* u.eventmsg valid. */
 	unsigned int cap_sys_ptrace:1; /* Tracer capable.  */
 	struct pt_regs *regs;
@@ -1488,15 +1491,17 @@
 		      int entry)
 {
 	struct ptrace_state *state = get_ptrace_state(engine, tsk);
-	u32 ret;
+	u32 ret=UTRACE_ACTION_RESUME;
 	if (unlikely(state == NULL))
 		return UTRACE_ACTION_RESUME;
 
 	state->regs=regs;
 	state->syscall = 1;
-	ret=ptrace_report(engine, tsk, state,
-			     ((state->options & PTRACE_O_TRACESYSGOOD)
-			      ? 0x80 : 0) | SIGTRAP);
+	if (entry || !state->skipexit) {
+		ret=ptrace_report(engine, tsk, state,
+				((state->options & PTRACE_O_TRACESYSGOOD)
+				 ? 0x80 : 0) | SIGTRAP);
+	}
 	return ret;
 }
 
@@ -1783,6 +1788,9 @@
 		state->sysemu = is_sysemu(request);
 #endif
 
+		if (addr & PT_UTRACE_SYSCALL_SKIPCALL)
+			ARCH_SET_SYSCALL_NO(state->regs,-1);
+		state->skipexit = ((addr & PT_UTRACE_SYSCALL_SKIPEXIT) != 0);
 		/*
 		 * Reset the action flags without QUIESCE, so it resumes.
 		 */
