diff -Naur linux-2.6.25.4-utrace/include/linux/list.h linux-2.6.25.4-utrace-viewos/include/linux/list.h
--- linux-2.6.25.4-utrace/include/linux/list.h	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/include/linux/list.h	2008-06-01 17:08:29.000000000 +0200
@@ -658,6 +658,24 @@
 		pos = n)
 
 /**
+ * list_for_each_safe_rcu_reverse
+ * @pos:	the &struct list_head to use as a loop cursor.
+ * @n:		another &struct list_head to use as temporary storage
+ * @head:	the head for your list.
+ *
+ * Iterate backwards over an rcu-protected list, safe against removal of 
+ * list entry.
+ *
+ * This list-traversal primitive may safely run concurrently with
+ * the _rcu list-mutation primitives such as list_add_rcu()
+ * as long as the traversal is guarded by rcu_read_lock().
+ */
+#define list_for_each_safe_rcu_reverse(pos, n, head) \
+	for (pos = (head)->prev; \
+		n = rcu_dereference(pos)->prev, pos != (head); \
+		pos = n)
+
+/**
  * list_for_each_entry_rcu	-	iterate over rcu list of given type
  * @pos:	the type * to use as a loop cursor.
  * @head:	the head for your list.
diff -Naur linux-2.6.25.4-utrace/include/linux/mm.h linux-2.6.25.4-utrace-viewos/include/linux/mm.h
--- linux-2.6.25.4-utrace/include/linux/mm.h	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/include/linux/mm.h	2008-06-01 17:08:29.000000000 +0200
@@ -783,6 +783,7 @@
 
 extern int make_pages_present(unsigned long addr, unsigned long end);
 extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
+extern int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);
 
 int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, unsigned long start,
 		int len, int write, int force, struct page **pages, struct vm_area_struct **vmas);
diff -Naur linux-2.6.25.4-utrace/include/linux/ptrace.h linux-2.6.25.4-utrace-viewos/include/linux/ptrace.h
--- linux-2.6.25.4-utrace/include/linux/ptrace.h	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/include/linux/ptrace.h	2008-06-01 17:08:29.000000000 +0200
@@ -20,6 +20,7 @@
 #define PTRACE_DETACH		  17
 
 #define PTRACE_SYSCALL		  24
+/*      PTRACE_SYSVM    has been defined below */
 
 /* 0x4200-0x4300 are reserved for architecture-independent additions.  */
 #define PTRACE_SETOPTIONS	0x4200
@@ -27,6 +28,19 @@
 #define PTRACE_GETSIGINFO	0x4202
 #define PTRACE_SETSIGINFO	0x4203
 
+#define PTRACE_MULTI            0x4300
+#define PTRACE_PEEKCHARDATA     0x4301
+#define PTRACE_POKECHARDATA     0x4302
+#define PTRACE_PEEKSTRINGDATA   0x4303
+#define PTRACE_SYSVM    0x43ff
+
+struct ptrace_multi {
+	long request;
+	long addr;
+	void *localaddr;
+	long length;
+};
+
 /* options set using PTRACE_SETOPTIONS */
 #define PTRACE_O_TRACESYSGOOD	0x00000001
 #define PTRACE_O_TRACEFORK	0x00000002
@@ -46,6 +60,18 @@
 #define PTRACE_EVENT_VFORK_DONE	5
 #define PTRACE_EVENT_EXIT	6
 
+/* options for PTRACE_SYSVM */
+#define PTRACE_VM_TEST    0x80000000
+#define PTRACE_VM_SKIPCALL  1
+#define PTRACE_VM_SKIPEXIT  2
+#define PTRACE_VM_MASK    0x00000003
+
+#ifdef CONFIG_VIEWOS
+/* options fpr PTRACE_VIEWOS */
+#define PT_VIEWOS_TEST    0x80000000
+#define PT_VIEWOS_MASK    0x00000000
+#endif
+
 #include <asm/ptrace.h>
 
 #ifdef __KERNEL__
diff -Naur linux-2.6.25.4-utrace/include/linux/utrace.h linux-2.6.25.4-utrace-viewos/include/linux/utrace.h
--- linux-2.6.25.4-utrace/include/linux/utrace.h	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/include/linux/utrace.h	2008-06-01 17:08:29.000000000 +0200
@@ -197,6 +197,7 @@
 	struct list_head entry;	/* Entry on thread's utrace.engines list.  */
 	struct rcu_head rhead;
 	atomic_t check_dead;
+	long saved_scno;
 
 /* public: */
 	const struct utrace_engine_ops *ops;
@@ -432,6 +433,12 @@
 void utrace_signal_handler_singlestep(struct task_struct *, struct pt_regs *);
 
 /*
+ *   Access another process' address space to/from user space
+ *   Check in with the same rule used for /proc/.../mem
+ */
+int utrace_access_process_vm(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);
+
+/*
  * <linux/tracehook.h> uses these accessors to avoid #ifdef CONFIG_UTRACE.
  */
 static inline unsigned long tsk_utrace_flags(struct task_struct *tsk)
diff -Naur linux-2.6.25.4-utrace/kernel/ptrace.c linux-2.6.25.4-utrace-viewos/kernel/ptrace.c
--- linux-2.6.25.4-utrace/kernel/ptrace.c	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/kernel/ptrace.c	2008-06-01 17:08:29.000000000 +0200
@@ -2,6 +2,8 @@
  * linux/kernel/ptrace.c
  *
  * (C) Copyright 1999 Linus Torvalds
+ * utrace by Roland McGrath
+ * PTRACE_MULTI support 2007,2008 (on utrace) Renzo Davoli
  *
  * Common interfaces for "ptrace()" which we do not want
  * to continually duplicate across every architecture.
@@ -105,9 +107,13 @@
 	unsigned int syscall:1;	/* Reporting for syscall.  */
 #ifdef PTRACE_SYSEMU
 	unsigned int sysemu:1;	/* PTRACE_SYSEMU in progress. */
+	unsigned int sysvm:2;	/* PTRACE_SYSVM bits */
 #endif
 	unsigned int have_eventmsg:1; /* u.eventmsg valid. */
 	unsigned int cap_sys_ptrace:1; /* Tracer capable.  */
+#ifdef PTRACE_SYSEMU
+	unsigned long *scno;
+#endif
 
 	union
 	{
@@ -1483,7 +1489,12 @@
 		      struct task_struct *tsk, struct pt_regs *regs,
 		      int entry)
 {
+	u32 ret;
 	struct ptrace_state *state = get_ptrace_state(engine, tsk);
+#ifdef PTRACE_SYSEMU
+	/*state->scno = tracehook_syscall_callno(regs);*/
+	state->scno = &regs->orig_ax; /* XXX */
+#endif
 	if (unlikely(state == NULL))
 		return UTRACE_ACTION_RESUME;
 
@@ -1503,24 +1514,38 @@
 		 * There, we swap the registers back and do ptrace_report.
 		 */
 
-		unsigned long *scno = &regs->orig_ax; /* XXX */
-		unsigned long *retval = &regs->ax;    /* XXX */
 		if (entry) {
-			*retval = *scno;
-			*scno = -1;
+			*state->scno = -1;
 			return UTRACE_ACTION_RESUME;
 		}
 		else {
-			*scno = *retval;
+			/*long *retval = tracehook_syscall_retval(regs);*/
+			long *retval = &regs->ax;    /* XXX */
 			*retval = -ENOSYS;
 		}
 	}
+
+	if (!entry && (state->sysvm & PTRACE_VM_SKIPEXIT)) {
+		state->sysvm=0;
+		return UTRACE_ACTION_RESUME;
+	}
+
 #endif
 
 	state->syscall = 1;
-	return ptrace_report(engine, tsk, state,
-			     ((state->options & PTRACE_O_TRACESYSGOOD)
-			      ? 0x80 : 0) | SIGTRAP);
+	ret=ptrace_report(engine, tsk, state,
+			((state->options & PTRACE_O_TRACESYSGOOD)
+			 ? 0x80 : 0) | SIGTRAP);
+#if 0
+#ifdef PTRACE_SYSEMU
+	ret=utrace_quiescent(tsk, NULL); 
+	utrace_set_flags(tsk, engine, engine->flags | UTRACE_ACTION_QUIESCE);
+	if (entry && (state->sysvm & PTRACE_VM_SKIPCALL)) {
+		*state->scno=-1;  
+	}
+#endif
+#endif
+	return ret;
 }
 
 static u32
@@ -1782,6 +1807,11 @@
 	case PTRACE_CONT:
 	case PTRACE_SYSCALL:
 #ifdef PTRACE_SYSEMU
+	case PTRACE_SYSVM:
+		if (request == PTRACE_SYSVM && addr == PTRACE_VM_TEST) {
+			ret = PTRACE_VM_MASK;
+			break;
+		} /* fallthrough */
 	case PTRACE_SYSEMU:
 	case PTRACE_SYSEMU_SINGLESTEP:
 #endif
@@ -1799,14 +1829,20 @@
 		if (ret)
 			break;
 
+#ifdef PTRACE_SYSEMU
+		state->sysemu = is_sysemu(request);
+		if (request == PTRACE_SYSVM) {
+			if (addr & PTRACE_VM_SKIPCALL) *state->scno=-1;
+			state->sysvm = addr & PTRACE_VM_MASK;
+		} else
+			state->sysvm = 0;
+#endif
+		
 		/*
 		 * Reset the action flags without QUIESCE, so it resumes.
 		 */
 		flags = 0;
-#ifdef PTRACE_SYSEMU
-		state->sysemu = is_sysemu(request);
-#endif
-		if (request == PTRACE_SYSCALL || is_sysemu(request))
+		if (request == PTRACE_SYSCALL || request == PTRACE_SYSVM || is_sysemu(request))
 			flags |= UTRACE_EVENT_SYSCALL;
 		if (is_singlestep(request))
 			flags |= UTRACE_ACTION_SINGLESTEP;
@@ -1842,6 +1878,74 @@
 #define arch_ptrace_attach(child)	do { } while (0)
 #endif
 
+static long ptrace_single(long request, long pid, long addr, long data,
+		struct task_struct *child, struct utrace_attached_engine *engine, struct ptrace_state *state)
+{
+	long ret, rc;
+  ret = 0;
+	rc = arch_ptrace(child, request, addr, data, &ret);
+	if (rc > 0)
+		ret = ptrace_common(request, child, engine, state,
+				addr, data);
+	else if (rc < 0)
+		ret = rc;
+	else
+		force_successful_syscall_return();
+  return ret;
+}
+
+static long ptrace_multi(long request, long pid, long addr, long size,
+		struct task_struct *child, struct utrace_attached_engine *engine, struct ptrace_state *state)
+{
+	long i,j,ret=0;
+	if (!access_ok(VERIFY_READ, addr, size*sizeof(struct ptrace_multi))) {
+		ret = -EIO;
+		goto out_multi_ptrace;
+	}
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
+		unsigned long len;
+		struct ptrace_multi __user pm ;
+		__copy_from_user(&pm, (struct ptrace_multi __user *)addr, sizeof(struct ptrace_multi));
+		len = pm.length;
+
+		switch ( pm.request){
+			case PTRACE_PEEKTEXT:
+			case PTRACE_PEEKDATA:
+			case PTRACE_PEEKUSR:
+			case PTRACE_POKETEXT:
+			case PTRACE_POKEDATA:
+			case PTRACE_POKEUSR:
+				if (len <= 0) len=1;
+				for (j=0; j<len && ret==0; j++)
+					ret=ptrace_single(pm.request, pid, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long), child, engine,state);
+				break;
+			case PTRACE_PEEKCHARDATA:
+				if (access_ok(VERIFY_WRITE, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 0, 0);
+				else
+					ret= -EIO;
+				break;
+			case PTRACE_POKECHARDATA:
+				if (access_ok(VERIFY_READ, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 1, 0);
+				else
+					ret= -EIO;
+				break;
+			case PTRACE_PEEKSTRINGDATA:
+				if (access_ok(VERIFY_WRITE, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 0, 1);
+				else
+					ret= -EIO;
+				break;
+			default:
+				ret=ptrace_single(pm.request, pid, (long) (pm.addr), (long) (pm.localaddr), child, engine,state);
+				break;
+		}
+	}
+out_multi_ptrace:
+	return ret;
+}
+
 asmlinkage long sys_ptrace(long request, long pid, long addr, long data)
 {
 	struct task_struct *child = NULL;
@@ -1854,19 +1958,13 @@
 
 	ret = ptrace_start(pid, request, &child, &engine, &state);
 	if (ret == -EIO) {
-		int rc;
-		ret = 0;
-		rc = arch_ptrace(child, request, addr, data, &ret);
-		if (rc > 0)
-			ret = ptrace_common(request, child, engine, state,
-					    addr, data);
-		else if (rc < 0)
-			ret = rc;
+		if (request == PTRACE_MULTI)
+			ret = ptrace_multi(request, pid, addr, data, child, engine, state);
 		else
-			force_successful_syscall_return();
+			ret = ptrace_single(request, pid, addr, data, child, engine, state);
 		put_task_struct(child);
 	}
-
+	pr_debug("%d ptrace -> %lx\n", current->pid, ret);
 	return ret;
 }
 
diff -Naur linux-2.6.25.4-utrace/kernel/utrace.c linux-2.6.25.4-utrace-viewos/kernel/utrace.c
--- linux-2.6.25.4-utrace/kernel/utrace.c	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/kernel/utrace.c	2008-06-01 17:08:30.000000000 +0200
@@ -1738,32 +1738,47 @@
 	struct utrace *utrace = tsk->utrace;
 	struct list_head *pos, *next;
 	struct utrace_attached_engine *engine;
-	unsigned long action, ev;
-	int killed;
+	unsigned long action;
+	int killed=0;
 
 /*
   XXX pass syscall # to engine hook directly, let it return inhibit-action
   to reset to -1
 	long syscall = tracehook_syscall_number(regs, is_exit);
 */
-
-	ev = is_exit ? UTRACE_EVENT(SYSCALL_EXIT) : UTRACE_EVENT(SYSCALL_ENTRY);
-
-	/* XXX must change for sharing */
+	/*long *scno = tracehook_syscall_callno(regs);*/
+	long *scno = &regs->orig_ax; /* XXX */
 	action = UTRACE_ACTION_RESUME;
-	list_for_each_safe_rcu(pos, next, &utrace->engines) {
-		engine = list_entry(pos, struct utrace_attached_engine, entry);
-		if (engine->flags & ev) {
-			if (is_exit)
-				REPORT(report_syscall_exit, regs);
-			else
-				REPORT(report_syscall_entry, regs);
+	if (is_exit) {
+		list_for_each_safe_rcu(pos, next, &utrace->engines) {
+			engine = list_entry(pos, struct utrace_attached_engine, entry);
+			if (engine->flags & UTRACE_EVENT(SYSCALL_EXIT)) {
+				if ((*scno=engine->saved_scno) >= 0) {/*restore scno and call*/
+					REPORT(report_syscall_exit, regs);
+					action = check_detach(tsk, action);
+					if ((killed = check_quiescent(tsk, action)) ||
+							action & UTRACE_ACTION_HIDE)
+						break;
+				}
+			}
+		}
+	} else {
+		list_for_each_safe_rcu_reverse(pos, next, &utrace->engines) {
+			engine = list_entry(pos, struct utrace_attached_engine, entry);
+			if (engine->flags & UTRACE_EVENT(SYSCALL_ENTRY)) {
+				if ((engine->saved_scno=*scno) >= 0) { /* -1 -> skip system call! */
+					REPORT(report_syscall_entry, regs);
+					action = check_detach(tsk, action);
+					if ((killed = check_quiescent(tsk, action)))
+						break;
+
+					/* HIDE is maningless in reverse way
+						 if (action & UTRACE_ACTION_HIDE)
+						 break; */
+				}
+			}
 		}
-		if (action & UTRACE_ACTION_HIDE)
-			break;
 	}
-	action = check_detach(tsk, action);
-	killed = check_quiescent(tsk, action);
 
 	if (!is_exit) {
 		if (unlikely(killed))
diff -Naur linux-2.6.25.4-utrace/mm/memory.c linux-2.6.25.4-utrace-viewos/mm/memory.c
--- linux-2.6.25.4-utrace/mm/memory.c	2008-06-01 17:08:40.000000000 +0200
+++ linux-2.6.25.4-utrace-viewos/mm/memory.c	2008-06-01 17:08:30.000000000 +0200
@@ -2701,6 +2701,74 @@
 }
 
 /*
+ * Access another process' address space to/from user space
+ * Do not walk the page table directly, use get_user_pages
+ */
+int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string)
+{
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	struct page *page;
+	char *buf;
+	unsigned long old_addr = addr;
+
+	mm = get_task_mm(tsk);
+	if (!mm)
+		return 0;
+
+	buf=kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!buf)
+		return 0;
+
+	down_read(&mm->mmap_sem);
+	/* ignore errors, just check how much was sucessfully transfered */
+	while (len) {
+		int bytes, ret, offset;
+		void *maddr;
+
+		ret = get_user_pages(tsk, mm, addr, 1,
+				write, 1, &page, &vma);
+		if (ret <= 0)
+			break;
+
+		bytes = len;
+		offset = addr & (PAGE_SIZE-1);
+		if (bytes > PAGE_SIZE-offset)
+			bytes = PAGE_SIZE-offset;
+
+		maddr = kmap(page);
+		if (write) {
+			__copy_from_user(buf,ubuf,bytes);
+			copy_to_user_page(vma, page, addr,
+					maddr + offset, buf, bytes);
+			if (!PageCompound(page))
+				set_page_dirty_lock(page);
+		} else {
+			copy_from_user_page(vma, page, addr,
+					buf, maddr + offset, bytes);
+			if (string) {
+				for (offset=0;offset<bytes;offset++)
+					if (buf[offset]==0)
+						break;
+				if (offset < bytes)
+					bytes=len=offset+1;
+			}
+			ret=__copy_to_user(ubuf,buf,bytes);
+		}
+		kunmap(page);
+		page_cache_release(page);
+		len -= bytes;
+		ubuf += bytes;
+		addr += bytes;
+	}
+	up_read(&mm->mmap_sem);
+	mmput(mm);
+
+	kfree(buf);
+	return addr - old_addr;
+}
+
+/*
  * Print the name of a VMA.
  */
 void print_vma_addr(char *prefix, unsigned long ip)
