diff -Naur linux-3.17.4/include/linux/ptrace.h linux-3.17.4.vm1/include/linux/ptrace.h
--- linux-3.17.4/include/linux/ptrace.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm1/include/linux/ptrace.h	2014-12-01 11:05:35.718641096 +0100
@@ -35,6 +35,11 @@
 
 #define PT_EXITKILL		(PTRACE_O_EXITKILL << PT_OPT_FLAG_SHIFT)
 
+#define PT_SYSCALL_SKIPEXIT  0x06000000
+#define PT_SYSCALL_SKIPCALL  0x04000000
+#define PT_SYSCALL_MASK      0x06000000
+#define PTRACE2PT_SYSCALL(X)  (((X) & PTRACE_SYSCALL_MASK) << 24)
+
 /* single stepping state bits (used on ARM and PA-RISC) */
 #define PT_SINGLESTEP_BIT	31
 #define PT_SINGLESTEP		(1<<PT_SINGLESTEP_BIT)
diff -Naur linux-3.17.4/include/linux/tracehook.h linux-3.17.4.vm1/include/linux/tracehook.h
--- linux-3.17.4/include/linux/tracehook.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm1/include/linux/tracehook.h	2014-12-01 11:05:35.718641096 +0100
@@ -99,7 +99,8 @@
 static inline __must_check int tracehook_report_syscall_entry(
 	struct pt_regs *regs)
 {
-	return ptrace_report_syscall(regs);
+	return ptrace_report_syscall(regs) ||
+		(current->ptrace & PT_SYSCALL_SKIPCALL);
 }
 
 /**
@@ -128,7 +129,8 @@
 		return;
 	}
 
-	ptrace_report_syscall(regs);
+	if (!(current->ptrace & PT_SYSCALL_SKIPEXIT))
+		ptrace_report_syscall(regs);
 }
 
 /**
diff -Naur linux-3.17.4/include/uapi/linux/ptrace.h linux-3.17.4.vm1/include/uapi/linux/ptrace.h
--- linux-3.17.4/include/uapi/linux/ptrace.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm1/include/uapi/linux/ptrace.h	2014-12-01 11:06:25.927758912 +0100
@@ -93,6 +93,11 @@
 
 #define PTRACE_O_MASK		(0x000000ff | PTRACE_O_EXITKILL)
 
+/* options for new PTRACE_SYSCALL syntax*/
+#define PTRACE_SYSCALL_SKIPEXIT  0x2
+#define PTRACE_SYSCALL_SKIPCALL  0x6
+#define PTRACE_SYSCALL_MASK    0x00000006
+
 #include <asm/ptrace.h>
 
 
diff -Naur linux-3.17.4/kernel/ptrace.c linux-3.17.4.vm1/kernel/ptrace.c
--- linux-3.17.4/kernel/ptrace.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm1/kernel/ptrace.c	2014-12-01 11:05:35.718641096 +0100
@@ -712,7 +712,7 @@
 #endif
 
 static int ptrace_resume(struct task_struct *child, long request,
-			 unsigned long data)
+			 unsigned long addr, unsigned long data)
 {
 	if (!valid_signal(data))
 		return -EIO;
@@ -741,6 +741,9 @@
 		user_disable_single_step(child);
 	}
 
+	child->ptrace &= ~PT_SYSCALL_MASK;
+	child->ptrace |= PTRACE2PT_SYSCALL(addr);
+
 	child->exit_code = data;
 	wake_up_state(child, __TASK_TRACED);
 
@@ -975,12 +978,12 @@
 #endif
 	case PTRACE_SYSCALL:
 	case PTRACE_CONT:
-		return ptrace_resume(child, request, data);
+		return ptrace_resume(child, request, addr, data);
 
 	case PTRACE_KILL:
 		if (child->exit_state)	/* already dead */
 			return 0;
-		return ptrace_resume(child, request, SIGKILL);
+		return ptrace_resume(child, request, addr, SIGKILL);
 
 #ifdef CONFIG_HAVE_ARCH_TRACEHOOK
 	case PTRACE_GETREGSET:
