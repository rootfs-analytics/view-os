diff -Naur linux-3.17.4.vm1/arch/um/include/asm/ptrace-generic.h linux-3.17.4.vm2/arch/um/include/asm/ptrace-generic.h
--- linux-3.17.4.vm1/arch/um/include/asm/ptrace-generic.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/include/asm/ptrace-generic.h	2014-12-01 11:13:24.617073242 +0100
@@ -37,7 +37,7 @@
 
 extern int arch_copy_tls(struct task_struct *new);
 extern void clear_flushed_tls(struct task_struct *task);
-extern void syscall_trace_enter(struct pt_regs *regs);
+extern int syscall_trace_enter(struct pt_regs *regs);
 extern void syscall_trace_leave(struct pt_regs *regs);
 
 #endif
diff -Naur linux-3.17.4.vm1/arch/um/include/shared/kern_util.h linux-3.17.4.vm2/arch/um/include/shared/kern_util.h
--- linux-3.17.4.vm1/arch/um/include/shared/kern_util.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/include/shared/kern_util.h	2014-12-01 11:13:24.617073242 +0100
@@ -57,7 +57,7 @@
 extern unsigned long to_irq_stack(unsigned long *mask_out);
 extern unsigned long from_irq_stack(int nested);
 
-extern void syscall_trace(struct uml_pt_regs *regs, int entryexit);
+extern int syscall_trace(struct uml_pt_regs *regs, int entryexit);
 extern int singlestepping(void *t);
 
 extern void segv_handler(int sig, struct siginfo *unused_si, struct uml_pt_regs *regs);
diff -Naur linux-3.17.4.vm1/arch/um/include/shared/ptrace_user.h linux-3.17.4.vm2/arch/um/include/shared/ptrace_user.h
--- linux-3.17.4.vm1/arch/um/include/shared/ptrace_user.h	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/include/shared/ptrace_user.h	2014-12-01 11:13:24.665074315 +0100
@@ -41,9 +41,20 @@
 #define PTRACE_OLDSETOPTIONS PTRACE_SETOPTIONS
 #endif
 
+/* these constant should eventually enter in sys/ptrace.h */
+#ifndef PTRACE_SYSCALL_SKIPCALL
+#define PTRACE_SYSCALL_SKIPCALL      0x6
+#endif
+#ifndef PTRACE_SYSCALL_SKIPEXIT
+#define PTRACE_SYSCALL_SKIPEXIT      0x2
+#endif
+
 void set_using_sysemu(int value);
 int get_using_sysemu(void);
 extern int sysemu_supported;
+void set_using_sysptvm(int value);
+int get_using_sysptvm(void);
+extern int sysptvm_supported;
 
 #define SELECT_PTRACE_OPERATION(sysemu_mode, singlestep_mode) \
 	(((int[3][3] ) { \
diff -Naur linux-3.17.4.vm1/arch/um/kernel/process.c linux-3.17.4.vm2/arch/um/kernel/process.c
--- linux-3.17.4.vm1/arch/um/kernel/process.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/kernel/process.c	2014-12-01 11:13:24.745076113 +0100
@@ -276,12 +276,16 @@
 }
 
 static atomic_t using_sysemu = ATOMIC_INIT(0);
+static atomic_t using_sysptvm = ATOMIC_INIT(0);
 int sysemu_supported;
+int sysptvm_supported;
 
 void set_using_sysemu(int value)
 {
 	if (value > sysemu_supported)
 		return;
+	if (value > 0)
+		atomic_set(&using_sysptvm, 0);
 	atomic_set(&using_sysemu, value);
 }
 
@@ -290,6 +294,20 @@
 	return atomic_read(&using_sysemu);
 }
 
+void set_using_sysptvm(int value)
+{
+	if (sysptvm_supported == 0)
+		return;
+	if (value > 0)
+		atomic_set(&using_sysemu, 0);
+	atomic_set(&using_sysptvm, value);
+}
+
+int get_using_sysptvm(void)
+{
+	return atomic_read(&using_sysptvm);
+}
+
 static int sysemu_proc_show(struct seq_file *m, void *v)
 {
 	seq_printf(m, "%d\n", get_using_sysemu());
@@ -324,24 +342,67 @@
 	.write		= sysemu_proc_write,
 };
 
-int __init make_proc_sysemu(void)
+static int sysptvm_proc_show(struct seq_file *m, void *v)
 {
-	struct proc_dir_entry *ent;
-	if (!sysemu_supported)
-		return 0;
+	seq_printf(m, "%d\n", (get_using_sysptvm() != 0));
+	return 0;
+}
 
-	ent = proc_create("sysemu", 0600, NULL, &sysemu_proc_fops);
+static int sysptvm_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, sysptvm_proc_show, NULL);
+}
+
+static ssize_t sysptvm_proc_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *pos)
+{
+	char tmp[2];
+
+	if (copy_from_user(tmp, buf, 1))
+		return -EFAULT;
+
+	if (tmp[0] == '0')
+		set_using_sysptvm(0);
+	if (tmp[0] == '1')
+		set_using_sysptvm(/* XXX */ 6);
+	/* We use the first char, but pretend to write everything */
+	return count;
+}
+
+static const struct file_operations sysptvm_proc_fops = {
+	.owner    = THIS_MODULE,
+	.open   = sysptvm_proc_open,
+	.read   = seq_read,
+	.llseek   = seq_lseek,
+	.release  = single_release,
+	.write    = sysptvm_proc_write,
+};
+
+int __init make_proc_sysemu_sysptvm(void)
+{
+	struct proc_dir_entry *ent;
+	if (sysemu_supported) {
+		ent = proc_create("sysemu", 0600, NULL, &sysemu_proc_fops);
 
-	if (ent == NULL)
-	{
-		printk(KERN_WARNING "Failed to register /proc/sysemu\n");
-		return 0;
+		if (ent == NULL)
+		{
+			printk(KERN_WARNING "Failed to register /proc/sysemu\n");
+			return 0;
+		}
 	}
+	if (sysptvm_supported) {
+		ent = proc_create("sysptvm", 0600, NULL, &sysptvm_proc_fops);
 
+		if (ent == NULL)
+		{
+			printk(KERN_WARNING "Failed to register /proc/sysptvm\n");
+			return 0;
+		}
+	} 
 	return 0;
 }
 
-late_initcall(make_proc_sysemu);
+late_initcall(make_proc_sysemu_sysptvm);
 
 int singlestepping(void * t)
 {
diff -Naur linux-3.17.4.vm1/arch/um/kernel/ptrace.c linux-3.17.4.vm2/arch/um/kernel/ptrace.c
--- linux-3.17.4.vm1/arch/um/kernel/ptrace.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/kernel/ptrace.c	2014-12-01 11:13:24.749076192 +0100
@@ -163,7 +163,7 @@
  * XXX Check PT_DTRACE vs TIF_SINGLESTEP for singlestepping check and
  * PT_PTRACED vs TIF_SYSCALL_TRACE for syscall tracing check
  */
-void syscall_trace_enter(struct pt_regs *regs)
+int syscall_trace_enter(struct pt_regs *regs)
 {
 	audit_syscall_entry(HOST_AUDIT_ARCH,
 			    UPT_SYSCALL_NR(&regs->regs),
@@ -173,9 +173,9 @@
 			    UPT_SYSCALL_ARG4(&regs->regs));
 
 	if (!test_thread_flag(TIF_SYSCALL_TRACE))
-		return;
+		return 0;
 
-	tracehook_report_syscall_entry(regs);
+	return tracehook_report_syscall_entry(regs);
 }
 
 void syscall_trace_leave(struct pt_regs *regs)
diff -Naur linux-3.17.4.vm1/arch/um/kernel/skas/syscall.c linux-3.17.4.vm2/arch/um/kernel/skas/syscall.c
--- linux-3.17.4.vm1/arch/um/kernel/skas/syscall.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/kernel/skas/syscall.c	2014-12-01 11:13:24.769076634 +0100
@@ -18,23 +18,25 @@
 	long result;
 	int syscall;
 
-	syscall_trace_enter(regs);
+	if (syscall_trace_enter(regs) == 0)
+	{
 
-	/*
-	 * This should go in the declaration of syscall, but when I do that,
-	 * strace -f -c bash -c 'ls ; ls' breaks, sometimes not tracing
-	 * children at all, sometimes hanging when bash doesn't see the first
-	 * ls exit.
-	 * The assembly looks functionally the same to me.  This is
-	 *     gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)
-	 * in case it's a compiler bug.
-	 */
-	syscall = UPT_SYSCALL_NR(r);
-	if ((syscall >= NR_SYSCALLS) || (syscall < 0))
-		result = -ENOSYS;
-	else result = EXECUTE_SYSCALL(syscall, regs);
+		/*
+		 * This should go in the declaration of syscall, but when I do that,
+		 * strace -f -c bash -c 'ls ; ls' breaks, sometimes not tracing
+		 * children at all, sometimes hanging when bash doesn't see the first
+		 * ls exit.
+		 * The assembly looks functionally the same to me.  This is
+		 *     gcc version 4.0.1 20050727 (Red Hat 4.0.1-5)
+		 * in case it's a compiler bug.
+		 */
+		syscall = UPT_SYSCALL_NR(r);
+		if ((syscall >= NR_SYSCALLS) || (syscall < 0))
+			result = -ENOSYS;
+		else result = EXECUTE_SYSCALL(syscall, regs);
 
-	PT_REGS_SET_SYSCALL_RETURN(regs, result);
+		PT_REGS_SET_SYSCALL_RETURN(regs, result);
+	}
 
 	syscall_trace_leave(regs);
 }
diff -Naur linux-3.17.4.vm1/arch/um/os-Linux/skas/process.c linux-3.17.4.vm2/arch/um/os-Linux/skas/process.c
--- linux-3.17.4.vm1/arch/um/os-Linux/skas/process.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/os-Linux/skas/process.c	2014-12-01 11:13:24.809077535 +0100
@@ -145,11 +145,11 @@
 }
 
 /*
- * To use the same value of using_sysemu as the caller, ask it that value
- * (in local_using_sysemu
+ * To use the same value of using_sysptvm or using_sysemu as the caller, i
+ * ask it that value in use_sys_ptvm_or_emu
  */
 static void handle_trap(int pid, struct uml_pt_regs *regs,
-			int local_using_sysemu)
+			int use_sys_ptvm_or_emu)
 {
 	int err, status;
 
@@ -159,7 +159,7 @@
 	/* Mark this as a syscall */
 	UPT_SYSCALL_NR(regs) = PT_SYSCALL_NR(regs->gp);
 
-	if (!local_using_sysemu)
+	if (!use_sys_ptvm_or_emu)
 	{
 		err = ptrace(PTRACE_POKEUSER, pid, PT_SYSCALL_NR_OFFSET,
 			     __NR_getpid);
@@ -346,6 +346,7 @@
 	int err, status, op, pid = userspace_pid[0];
 	/* To prevent races if using_sysemu changes under us.*/
 	int local_using_sysemu;
+	int local_using_sysptvm;
 	siginfo_t si;
 
 	/* Handle any immediate reschedules or signals */
@@ -374,11 +375,12 @@
 
 		/* Now we set local_using_sysemu to be used for one loop */
 		local_using_sysemu = get_using_sysemu();
+		local_using_sysptvm = get_using_sysptvm();
 
 		op = SELECT_PTRACE_OPERATION(local_using_sysemu,
 					     singlestepping(NULL));
 
-		if (ptrace(op, pid, 0, 0)) {
+		if (ptrace(op, pid, local_using_sysptvm, 0)) {
 			printk(UM_KERN_ERR "userspace - ptrace continue "
 			       "failed, op = %d, errno = %d\n", op, errno);
 			fatal_sigsegv();
diff -Naur linux-3.17.4.vm1/arch/um/os-Linux/start_up.c linux-3.17.4.vm2/arch/um/os-Linux/start_up.c
--- linux-3.17.4.vm1/arch/um/os-Linux/start_up.c	2014-11-21 18:24:10.000000000 +0100
+++ linux-3.17.4.vm2/arch/um/os-Linux/start_up.c	2014-12-01 11:13:24.809077535 +0100
@@ -198,6 +198,21 @@
 "    See http://perso.wanadoo.fr/laurent.vivier/UML/ for further \n"
 "    information.\n\n");
 
+/* Changed only during early boot */
+static int force_sysptvm_disabled;
+
+static int __init nosysptvm_cmd_param(char *str, int* add)
+{
+	force_sysptvm_disabled = 1;
+	return 0;
+}
+
+__uml_setup("nosysptvm", nosysptvm_cmd_param,
+"nosysptvm\n"
+"    Turns off syscall emulation tags for ptrace (ptrace_vm) on.\n"
+"    Ptrace_vm is a feature introduced by Renzo Davoli. It changes\n"
+"    behaviour of ptrace() and helps reducing host context switch rate.\n\n");
+
 static void __init check_sysemu(void)
 {
 	unsigned long regs[MAX_REG_NR];
@@ -293,6 +308,114 @@
 	non_fatal("missing\n");
 }
 
+/*
+ * test thread code. This thread is started only to test
+ * which features are provided by the linux kernel
+ */
+static int sysptvm_child(void *arg)
+{
+	int *featurep = arg;
+	int p[2] = {-1, -1};
+	pid_t pid = os_getpid();
+	if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {
+		perror("ptrace test_ptracemulti");
+		kill(pid, SIGKILL);
+	}
+	kill(pid, SIGSTOP);
+	*featurep = 0;
+	os_getpid();
+	/*
+	 * if it reaches this point in 1 stop it means that
+	 * PTRACE_SYSCALL_SKIPEXIT works
+	 */
+	*featurep = PTRACE_SYSCALL_SKIPEXIT;
+	pipe(p);
+	/*
+	 * if after a PTRACE_SYSCALL_SKIPCALL p[0] is already <0
+	 * pipe has been really skipped
+	 */
+	if (p[0] < 0)
+		*featurep = PTRACE_SYSCALL_SKIPCALL;
+	else { /* clean up everything */
+		close(p[0]);
+		close(p[1]);
+	}
+	return 0;
+}
+
+/*
+ * kernel feature test:
+ * it returns:
+ *   -1 error
+ *   0 old PTRACE_SYSCALL (addr is ignored)
+ *   PTRACE_SYSCALL_SKIPEXIT: just skip_exit is provided
+ *   PTRACE_SYSCALL_SKIPCALL: the entire syntax is implemented
+ *   by the running kernel
+ */
+static int __init test_ptrace_sysptvm(void)
+{
+	int pid, status, rv, feature;
+	static char stack[1024];
+	feature = 0;
+
+	pid = clone(sysptvm_child, &stack[1020], SIGCHLD | CLONE_VM, &feature);
+	if (pid < 0)
+		return 0;
+	if (waitpid(pid, &status, WUNTRACED) < 0) {
+		kill(pid, SIGKILL);
+		return 0;
+	}
+	/* restart and wait for the next syscall (getpid)*/
+	rv = ptrace(PTRACE_SYSCALL, pid, 0, 0);
+	if (waitpid(pid, &status, WUNTRACED) < 0)
+		goto out;
+	/* try to skip the exit call */
+	rv = ptrace(PTRACE_SYSCALL, pid, PTRACE_SYSCALL_SKIPEXIT, 0);
+	if (rv < 0)
+		goto out;
+	/* wait for the next stop */
+	if (waitpid(pid, &status, WUNTRACED) < 0)
+		goto out;
+	/*
+	 * if feature is already 0 it means that this is the exit call,
+	 * and it has not been skipped, otherwise this is the
+	 * entry call for the system call "time"
+	 */
+	if (feature < PTRACE_SYSCALL_SKIPEXIT)
+		goto out;
+	/* restart (time) and and try to skip the entire call */
+	rv = ptrace(PTRACE_SYSCALL, pid, PTRACE_SYSCALL_SKIPCALL, 0);
+	if (waitpid(pid, &status, WUNTRACED) < 0)
+		return 0;
+out:
+	ptrace(PTRACE_KILL, pid, 0, 0);
+	/* eliminate zombie */
+	if (waitpid(pid, &status, WUNTRACED) < 0)
+		return 0;
+	return feature;
+}
+
+static int  __init check_sysptvm(void)
+{
+	int feature = test_ptrace_sysptvm();
+
+	non_fatal("Checking ptrace new tags for syscall emulation...");
+	if (feature == PTRACE_SYSCALL_SKIPCALL) {
+		sysptvm_supported = 1;
+		non_fatal("OK");
+		if (!force_sysptvm_disabled) {
+			set_using_sysptvm(PTRACE_SYSCALL_SKIPCALL);
+			non_fatal("\n");
+			return 1;
+		} else {
+			non_fatal(" (disabled)\n");
+			return 0;
+		}
+	} else
+		non_fatal("unsupported\n");
+	return 0;
+}
+
 static void __init check_ptrace(void)
 {
 	int pid, syscall, n, status;
@@ -331,6 +454,7 @@
 	stop_ptraced_child(pid, 0, 1);
 	non_fatal("OK\n");
 	check_sysemu();
+	check_sysptvm();
 }
 
 extern void check_tmpexec(void);
