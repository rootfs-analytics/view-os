diff -Naur linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/mm.h linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/include/linux/mm.h
--- linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/mm.h	2008-06-11 23:25:40.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/include/linux/mm.h	2008-06-11 23:51:15.000000000 +0200
@@ -783,6 +783,7 @@
 
 extern int make_pages_present(unsigned long addr, unsigned long end);
 extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
+extern int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string);
 
 int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, unsigned long start,
 		int len, int write, int force, struct page **pages, struct vm_area_struct **vmas);
diff -Naur linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/ptrace.h linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/include/linux/ptrace.h
--- linux-2.6.25.6-utrace-callorder-ptrace_vm/include/linux/ptrace.h	2008-06-11 23:25:40.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/include/linux/ptrace.h	2008-06-11 23:51:15.000000000 +0200
@@ -27,6 +27,18 @@
 #define PTRACE_GETSIGINFO	0x4202
 #define PTRACE_SETSIGINFO	0x4203
 
+#define PTRACE_MULTI            0x4300
+#define PTRACE_PEEKCHARDATA     0x4301
+#define PTRACE_POKECHARDATA     0x4302
+#define PTRACE_PEEKSTRINGDATA   0x4303
+
+struct ptrace_multi {
+	long request;
+	long addr;
+	void *localaddr;
+	long length;
+};
+
 /* options set using PTRACE_SETOPTIONS */
 #define PTRACE_O_TRACESYSGOOD	0x00000001
 #define PTRACE_O_TRACEFORK	0x00000002
diff -Naur linux-2.6.25.6-utrace-callorder-ptrace_vm/kernel/ptrace.c linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/kernel/ptrace.c
--- linux-2.6.25.6-utrace-callorder-ptrace_vm/kernel/ptrace.c	2008-06-11 23:25:40.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/kernel/ptrace.c	2008-06-11 23:51:16.000000000 +0200
@@ -2,6 +2,7 @@
  * linux/kernel/ptrace.c
  *
  * (C) Copyright 1999 Linus Torvalds
+ * * PTRACE_VM and PTRACE_MULTI support 2008 Renzo Davoli
  *
  * Common interfaces for "ptrace()" which we do not want
  * to continually duplicate across every architecture.
@@ -1616,55 +1617,19 @@
 	.tracer_task = ptrace_tracer_task,
 	.allow_access_process_vm = ptrace_allow_access_process_vm,
 };
-
+
 int ptrace_readdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)
 {
-	int copied = 0;
-
-	while (len > 0) {
-		char buf[128];
-		int this_len, retval;
-
-		this_len = (len > sizeof(buf)) ? sizeof(buf) : len;
-		retval = access_process_vm(tsk, src, buf, this_len, 0);
-		if (!retval) {
-			if (copied)
-				break;
-			return -EIO;
-		}
-		if (copy_to_user(dst, buf, retval))
-			return -EFAULT;
-		copied += retval;
-		src += retval;
-		dst += retval;
-		len -= retval;			
-	}
-	return copied;
+	if (!access_ok(VERIFY_WRITE, dst, len))
+		return -EIO;
+	return access_process_vm_user(tsk, src, dst, len, 0, 0);
 }
 
 int ptrace_writedata(struct task_struct *tsk, char __user *src, unsigned long dst, int len)
 {
-	int copied = 0;
-
-	while (len > 0) {
-		char buf[128];
-		int this_len, retval;
-
-		this_len = (len > sizeof(buf)) ? sizeof(buf) : len;
-		if (copy_from_user(buf, src, this_len))
-			return -EFAULT;
-		retval = access_process_vm(tsk, dst, buf, this_len, 1);
-		if (!retval) {
-			if (copied)
-				break;
-			return -EIO;
-		}
-		copied += retval;
-		src += retval;
-		dst += retval;
-		len -= retval;			
-	}
-	return copied;
+	if (!access_ok(VERIFY_READ, dst, len))
+		return -EIO;
+	return access_process_vm_user(tsk, dst, src, len, 1, 0);
 }
 
 #ifdef PTRACE_SINGLESTEP
@@ -1831,6 +1796,74 @@
 #define arch_ptrace_attach(child)	do { } while (0)
 #endif
 
+static long ptrace_single(long request, long pid, long addr, long data,
+		struct task_struct *child, struct utrace_attached_engine *engine, struct ptrace_state *state)
+{
+	long ret, rc;
+	ret = 0;
+	rc = arch_ptrace(child, request, addr, data, &ret);
+	if (rc > 0)
+		ret = ptrace_common(request, child, engine, state,
+				addr, data);
+	else if (rc < 0)
+		ret = rc;
+	else
+		force_successful_syscall_return();
+	return ret;
+}
+
+static long ptrace_multi(long request, long pid, long addr, long size,
+		struct task_struct *child, struct utrace_attached_engine *engine, struct ptrace_state *state)
+{
+	long i,j,ret=0;
+	if (!access_ok(VERIFY_READ, addr, size*sizeof(struct ptrace_multi))) {
+		ret = -EIO;
+		goto out_multi_ptrace;
+	}
+	for (i=0; i<size && ret==0; i++, addr+=sizeof(struct ptrace_multi)) {
+		unsigned long len;
+		struct ptrace_multi __user pm ;
+		__copy_from_user(&pm, (struct ptrace_multi __user *)addr, sizeof(struct ptrace_multi));
+		len = pm.length;
+
+		switch ( pm.request){
+			case PTRACE_PEEKTEXT:
+			case PTRACE_PEEKDATA:
+			case PTRACE_PEEKUSR:
+			case PTRACE_POKETEXT:
+			case PTRACE_POKEDATA:
+			case PTRACE_POKEUSR:
+				if (len <= 0) len=1;
+				for (j=0; j<len && ret==0; j++)
+					ret=ptrace_single(pm.request, pid, (long) (pm.addr) + j*sizeof(long), (long) (pm.localaddr) + j*sizeof(long), child, engine,state);
+				break;
+			case PTRACE_PEEKCHARDATA:
+				if (access_ok(VERIFY_WRITE, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 0, 0);
+				else
+					ret= -EIO;
+				break;
+			case PTRACE_POKECHARDATA:
+				if (access_ok(VERIFY_READ, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 1, 0);
+				else
+					ret= -EIO;
+				break;
+			case PTRACE_PEEKSTRINGDATA:
+				if (access_ok(VERIFY_WRITE, pm.localaddr ,len))
+					ret=access_process_vm_user(child, pm.addr, pm.localaddr, len, 0, 1);
+				else
+					ret= -EIO;
+				break;
+			default:
+				ret=ptrace_single(pm.request, pid, (long) (pm.addr), (long) (pm.localaddr), child, engine,state);
+				break;
+		}
+	}
+out_multi_ptrace:
+	return ret;
+}
+
 asmlinkage long sys_ptrace(long request, long pid, long addr, long data)
 {
 	struct task_struct *child = NULL;
@@ -1843,16 +1876,10 @@
 
 	ret = ptrace_start(pid, request, &child, &engine, &state);
 	if (ret == -EIO) {
-		int rc;
-		ret = 0;
-		rc = arch_ptrace(child, request, addr, data, &ret);
-		if (rc > 0)
-			ret = ptrace_common(request, child, engine, state,
-					    addr, data);
-		else if (rc < 0)
-			ret = rc;
+		if (request == PTRACE_MULTI)
+			ret = ptrace_multi(request, pid, addr, data, child, engine, state);
 		else
-			force_successful_syscall_return();
+			ret = ptrace_single(request, pid, addr, data, child, engine, state);
 		put_task_struct(child);
 	}
 
diff -Naur linux-2.6.25.6-utrace-callorder-ptrace_vm/mm/memory.c linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/mm/memory.c
--- linux-2.6.25.6-utrace-callorder-ptrace_vm/mm/memory.c	2008-06-11 23:25:40.000000000 +0200
+++ linux-2.6.25.6-utrace-callorder-ptrace_vm-ptrace_multi/mm/memory.c	2008-06-11 23:51:16.000000000 +0200
@@ -2701,6 +2701,74 @@
 }
 
 /*
+ * Access another process' address space to/from user space
+ * Do not walk the page table directly, use get_user_pages
+ */
+int access_process_vm_user(struct task_struct *tsk, unsigned long addr, char __user *ubuf, int len, int write, int string)
+{
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	struct page *page;
+	char *buf;
+	unsigned long old_addr = addr;
+
+	mm = get_task_mm(tsk);
+	if (!mm)
+		return 0;
+
+	buf=kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!buf)
+		return 0;
+
+	down_read(&mm->mmap_sem);
+	/* ignore errors, just check how much was sucessfully transfered */
+	while (len) {
+		int bytes, ret, offset;
+		void *maddr;
+
+		ret = get_user_pages(tsk, mm, addr, 1,
+				write, 1, &page, &vma);
+		if (ret <= 0)
+			break;
+
+		bytes = len;
+		offset = addr & (PAGE_SIZE-1);
+		if (bytes > PAGE_SIZE-offset)
+			bytes = PAGE_SIZE-offset;
+
+		maddr = kmap(page);
+		if (write) {
+			__copy_from_user(buf,ubuf,bytes);
+			copy_to_user_page(vma, page, addr,
+					maddr + offset, buf, bytes);
+			if (!PageCompound(page))
+				set_page_dirty_lock(page);
+		} else {
+			copy_from_user_page(vma, page, addr,
+					buf, maddr + offset, bytes);
+			if (string) {
+				for (offset=0;offset<bytes;offset++)
+					if (buf[offset]==0)
+						break;
+				if (offset < bytes)
+					bytes=len=offset+1;
+			}
+			ret=__copy_to_user(ubuf,buf,bytes);
+		}
+		kunmap(page);
+		page_cache_release(page);
+		len -= bytes;
+		ubuf += bytes;
+		addr += bytes;
+	}
+	up_read(&mm->mmap_sem);
+	mmput(mm);
+
+	kfree(buf);
+	return addr - old_addr;
+}
+
+/*
  * Print the name of a VMA.
  */
 void print_vma_addr(char *prefix, unsigned long ip)
